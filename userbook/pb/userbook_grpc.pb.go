// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: userbook.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserBookService_BorrowBook_FullMethodName       = "/UserBookService/BorrowBook"
	UserBookService_ReturnBook_FullMethodName       = "/UserBookService/ReturnBook"
	UserBookService_ListAllUserBooks_FullMethodName = "/UserBookService/ListAllUserBooks"
)

// UserBookServiceClient is the client API for UserBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBookServiceClient interface {
	BorrowBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowResponse, error)
	ReturnBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowResponse, error)
	ListAllUserBooks(ctx context.Context, in *UserID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookResponse], error)
}

type userBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBookServiceClient(cc grpc.ClientConnInterface) UserBookServiceClient {
	return &userBookServiceClient{cc}
}

func (c *userBookServiceClient) BorrowBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowResponse)
	err := c.cc.Invoke(ctx, UserBookService_BorrowBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBookServiceClient) ReturnBook(ctx context.Context, in *BorrowBookRequest, opts ...grpc.CallOption) (*BorrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowResponse)
	err := c.cc.Invoke(ctx, UserBookService_ReturnBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userBookServiceClient) ListAllUserBooks(ctx context.Context, in *UserID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BookResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserBookService_ServiceDesc.Streams[0], UserBookService_ListAllUserBooks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserID, BookResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserBookService_ListAllUserBooksClient = grpc.ServerStreamingClient[BookResponse]

// UserBookServiceServer is the server API for UserBookService service.
// All implementations must embed UnimplementedUserBookServiceServer
// for forward compatibility.
type UserBookServiceServer interface {
	BorrowBook(context.Context, *BorrowBookRequest) (*BorrowResponse, error)
	ReturnBook(context.Context, *BorrowBookRequest) (*BorrowResponse, error)
	ListAllUserBooks(*UserID, grpc.ServerStreamingServer[BookResponse]) error
	mustEmbedUnimplementedUserBookServiceServer()
}

// UnimplementedUserBookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserBookServiceServer struct{}

func (UnimplementedUserBookServiceServer) BorrowBook(context.Context, *BorrowBookRequest) (*BorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowBook not implemented")
}
func (UnimplementedUserBookServiceServer) ReturnBook(context.Context, *BorrowBookRequest) (*BorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}
func (UnimplementedUserBookServiceServer) ListAllUserBooks(*UserID, grpc.ServerStreamingServer[BookResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListAllUserBooks not implemented")
}
func (UnimplementedUserBookServiceServer) mustEmbedUnimplementedUserBookServiceServer() {}
func (UnimplementedUserBookServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBookServiceServer will
// result in compilation errors.
type UnsafeUserBookServiceServer interface {
	mustEmbedUnimplementedUserBookServiceServer()
}

func RegisterUserBookServiceServer(s grpc.ServiceRegistrar, srv UserBookServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserBookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserBookService_ServiceDesc, srv)
}

func _UserBookService_BorrowBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBookServiceServer).BorrowBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBookService_BorrowBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBookServiceServer).BorrowBook(ctx, req.(*BorrowBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBookService_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBookServiceServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserBookService_ReturnBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBookServiceServer).ReturnBook(ctx, req.(*BorrowBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserBookService_ListAllUserBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserBookServiceServer).ListAllUserBooks(m, &grpc.GenericServerStream[UserID, BookResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserBookService_ListAllUserBooksServer = grpc.ServerStreamingServer[BookResponse]

// UserBookService_ServiceDesc is the grpc.ServiceDesc for UserBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserBookService",
	HandlerType: (*UserBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BorrowBook",
			Handler:    _UserBookService_BorrowBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _UserBookService_ReturnBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllUserBooks",
			Handler:       _UserBookService_ListAllUserBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "userbook.proto",
}
